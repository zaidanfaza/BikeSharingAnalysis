# -*- coding: utf-8 -*-
"""dashboard.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1n47AvhRNofkBar7I67duGmLd0IH-L2x4

# Install Streamlit & Packages

# Struktur Dashboard
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import streamlit as st
from scipy.stats import linregress

# Set style seaborn
sns.set(style='dark')

# Mengambil data dari URL
url = 'https://drive.google.com/uc?id=14vZd0xgkZgxEVqgLlQYWxhAxO9f3_ob3'
hour = pd.read_csv(url)

# Menghapus kolom yang tidak diperlukan
hour.drop(columns=['windspeed'], inplace=True, errors='ignore')

# Mengubah nama kolom
hour.rename(columns={
    'dteday': 'dateday',
    'yr': 'year',
    'mnth': 'month',
    'weathersit': 'weather_cond',
    'cnt': 'count'
}, inplace=True)

# Mengubah angka menjadi keterangan
hour['month'] = hour['month'].map({
    1: 'Jan', 2: 'Feb', 3: 'Mar', 4: 'Apr', 5: 'May', 6: 'Jun',
    7: 'Jul', 8: 'Aug', 9: 'Sep', 10: 'Oct', 11: 'Nov', 12: 'Dec'
})

hour['season'] = hour['season'].map({
    1: 'Spring', 2: 'Summer', 3: 'Fall', 4: 'Winter'
})

hour['weather_cond'] = hour['weather_cond'].map({
    1: 'Clear/Partly Cloudy',
    2: 'Misty/Cloudy',
    3: 'Light Snow/Rain',
    4: 'Severe Weather'
})

# Mengelompokkan data berdasarkan musim
musiman = hour.groupby('season').agg(
    total_peminjaman=('count', 'sum'),
    casual=('casual', 'sum'),
    registered=('registered', 'sum'),
    avg_suhu=('temp', 'mean')  # Tambahkan kolom suhu rata-rata per musim
).reset_index()

musiman['proporsi_casual'] = musiman['casual'] / musiman['total_peminjaman']
musiman['proporsi_registered'] = musiman['registered'] / musiman['total_peminjaman']

# Membuat Dashboard
st.title('Dashboard Analisis Peminjaman Sepeda')

# Menampilkan Dataframe
st.header('Data Peminjaman Sepeda')
st.write(hour)

# Plot Tren Peminjaman per Musim
st.header('Tren Peminjaman Sepeda per Musim')
fig1, ax1 = plt.subplots(figsize=(8, 6))

# Bar chart untuk total peminjaman
ax1.bar(musiman['season'], musiman['total_peminjaman'], color='skyblue', label='Total Peminjaman')
ax1.set_xlabel('Musim')
ax1.set_ylabel('Jumlah Peminjaman')
ax1.set_title('Jumlah Peminjaman Sepeda per Musim dan Rata-Rata Suhu')
ax1.set_xticks(musiman['season'])
ax1.set_xticklabels(musiman['season'], rotation=45)

# Membuat sumbu y kedua untuk rata-rata suhu
ax2 = ax1.twinx()
ax2.plot(musiman['season'], musiman['avg_suhu'], color='orange', marker='o', label='Rata-Rata Suhu')
ax2.set_ylabel('Rata-Rata Suhu (°C)')

# Menambahkan legend dan grid
ax1.legend(loc='upper left')
ax2.legend(loc='upper right')
ax1.grid(axis='y')

# Menampilkan plot di Streamlit
st.pyplot(fig1)

# Plot Total Peminjaman per Musim dari Tahun ke Tahun
st.header('Total Peminjaman Sepeda per Musim dari Tahun ke Tahun')
musim_tahunan = hour.groupby(['year', 'season']).agg(total_peminjaman=('count', 'sum')).reset_index()
musim_tahunan['periode'] = musim_tahunan['year'].astype(str) + ' ' + musim_tahunan['season']
fig2, ax3 = plt.subplots(figsize=(10, 5))
ax3.plot(musim_tahunan['periode'], musim_tahunan['total_peminjaman'], marker='o', color='blue')

# Set the ticks and labels
ax3.set_xticks(musim_tahunan['periode'])  # Set x-ticks to the periods
ax3.set_xticklabels(musim_tahunan['periode'], rotation=45, ha='right')

ax3.set_title('Total Peminjaman Sepeda per Musim dari Tahun ke Tahun')
ax3.set_xlabel('Periode (Tahun dan Musim)')
ax3.set_ylabel('Total Peminjaman')
ax3.grid(True)
plt.tight_layout()
st.pyplot(fig2)

# Plot Proporsi Peminjaman Casual dan Registered
st.header('Proporsi Peminjaman Casual dan Registered')
fig3, ax4 = plt.subplots()
ax4.bar(['Casual', 'Registered'], [musiman['casual'].sum(), musiman['registered'].sum()], color=['orange', 'green'])
ax4.set_ylabel('Jumlah Peminjaman')
ax4.set_title('Total Peminjaman: Casual vs Registered')
st.pyplot(fig3)

# Menampilkan Proporsi Peminjaman Terdaftar
proporsi_registered_total = musiman['registered'].sum() / musiman['total_peminjaman'].sum()
st.write(f'Proporsi peminjaman terdaftar secara keseluruhan: {proporsi_registered_total:.2%}')

# Menghitung garis regresi
slope, intercept, r_value, p_value, std_err = linregress(musiman['avg_suhu'], musiman['total_peminjaman'])

# Membuat prediksi menggunakan slope dan intercept
line = slope * musiman['avg_suhu'] + intercept

# Plot scatter dengan garis regresi
fig4, ax5 = plt.subplots(figsize=(8, 6))
ax5.scatter(musiman['avg_suhu'], musiman['total_peminjaman'], color='blue', label='Data')
ax5.plot(musiman['avg_suhu'], line, color='red', label=f'Garis Regresi: y={slope:.2f}x+{intercept:.2f}')
ax5.set_title('Hubungan antara Rata-Rata Suhu dan Total Peminjaman Sepeda')
ax5.set_xlabel('Rata-Rata Suhu (°C)')
ax5.set_ylabel('Total Peminjaman')
ax5.grid()
ax5.legend()

# Menampilkan plot regresi di Streamlit
st.pyplot(fig4)

# Menampilkan nilai koefisien korelasi
st.write(f'Koefisien Korelasi antara total peminjaman dan rata-rata suhu: {r_value:.2f}')

# Grafik peminjam biasa dan terdaftar berdasarkan jam dan kondisi cuaca
cuaca_waktu = hour.groupby(['hr', 'weather_cond']).agg(
    total_casual=('casual', 'sum'),
    total_registered=('registered', 'sum')
).reset_index()

# Menambahkan label cuaca
cuaca_waktu['weather_label'] = cuaca_waktu['weather_cond'].map({
    'Clear/Partly Cloudy': 'Cerah',
    'Misty/Cloudy': 'Mendung',
    'Light Snow/Rain': 'Hujan/Salju Ringan',
    'Severe Weather': 'Hujan Lebat'
})

# Membuat objek figure dan axis
fig5, ax6 = plt.subplots(figsize=(12, 6))

# Plot perbandingan peminjam biasa dan terdaftar berdasarkan kondisi cuaca
for weathersit, label, color in zip(
    ['Clear/Partly Cloudy', 'Misty/Cloudy', 'Light Snow/Rain', 'Severe Weather'],
    ['Cerah', 'Mendung', 'Hujan/Salju Ringan', 'Hujan Lebat'],
    ['blue', 'green', 'red', 'purple']
):
    cuaca_subset = cuaca_waktu[cuaca_waktu['weather_cond'] == weathersit]

    ax6.plot(cuaca_subset['hr'], cuaca_subset['total_casual'], label=f'Casual ({label})', linestyle='--', color=color)
    ax6.plot(cuaca_subset['hr'], cuaca_subset['total_registered'], label=f'Registered ({label})', color=color)

# Menambahkan label dan judul
ax6.set_xlabel('Jam')
ax6.set_ylabel('Jumlah Peminjaman')
ax6.set_title('Perbandingan Peminjam Biasa dan Terdaftar Berdasarkan Jam dan Kondisi Cuaca')
ax6.set_xticks(range(0, 24))  # Menampilkan setiap jam
ax6.legend(loc='upper left', bbox_to_anchor=(1, 1))  # Meletakkan legenda di luar plot
ax6.grid()

# Menampilkan plot di Streamlit
st.pyplot(fig5)

# Tambahkan copyright
st.caption('zaidanfazaalarsyad')
